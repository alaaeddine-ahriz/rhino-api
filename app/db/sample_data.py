"""Database utilities for working with sample data.

Sample data is now stored in sample_data.db file instead of being generated by code.

To use the sample database:
1. Copy sample_data.db to test.db: cp sample_data.db test.db
2. Run the application normally

The sample database contains:
- 4 subjects: SYD, TCP, MATH, PHYS
- 8 challenges across different subjects
- 5 users with different roles (admin, teacher, students)
- Authentication tokens for testing
"""

from sqlmodel import Session, text
from app.db.session import engine
import os
import shutil

def copy_sample_data():
    """Copy sample database to active database."""
    if os.path.exists("sample_data.db"):
        shutil.copy2("sample_data.db", "test.db")
        print("✅ Sample data copied to test.db")
    else:
        print("❌ sample_data.db not found")

def clear_all_data():
    """Clear all data from the active database."""
    with Session(engine) as session:
        session.execute(text("DELETE FROM challengeserved"))
        session.execute(text("DELETE FROM challenge"))
        session.execute(text("DELETE FROM matiere"))
        session.execute(text("DELETE FROM user"))
        session.execute(text("DELETE FROM token"))
        session.commit()
        print("🗑️ All data cleared from database.")

def show_database_contents():
    """Display current database contents."""
    with Session(engine) as session:
        # Check if database has data
        subjects_count = session.exec(text("SELECT COUNT(*) FROM matiere")).fetchone()[0]
        challenges_count = session.exec(text("SELECT COUNT(*) FROM challenge")).fetchone()[0]
        users_count = session.exec(text("SELECT COUNT(*) FROM user")).fetchone()[0]
        
        print(f"📊 Database Statistics:")
        print(f"   - Subjects: {subjects_count}")
        print(f"   - Challenges: {challenges_count}")
        print(f"   - Users: {users_count}")
        
        if subjects_count > 0:
            # Show subjects
            subjects = session.exec(text("SELECT name, description, granularite FROM matiere")).fetchall()
            print("\n📚 SUBJECTS:")
            for subject in subjects:
                print(f"   {subject[0]}: {subject[1]} (granularité: {subject[2]})")
        
        if challenges_count > 0:
            # Show challenges by subject
            challenges = session.exec(text("SELECT ref, question, matiere FROM challenge ORDER BY matiere, ref")).fetchall()
            print("\n❓ CHALLENGES:")
            current_matiere = None
            for challenge in challenges:
                if challenge[2] != current_matiere:
                    current_matiere = challenge[2]
                    print(f"\n   [{current_matiere}]:")
                print(f"     {challenge[0]}: {challenge[1][:70]}...")
        
        if users_count > 0:
            # Show users
            users = session.exec(text("SELECT username, role, subscriptions FROM user")).fetchall()
            print("\n👥 USERS:")
            for user in users:
                print(f"   {user[0]} ({user[1]}) - subscribed to: {user[2]}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) > 1:
        if sys.argv[1] == "--clear":
            clear_all_data()
        elif sys.argv[1] == "--copy-sample":
            copy_sample_data()
        elif sys.argv[1] == "--help":
            print(__doc__)
            print("\nUsage:")
            print("  python app/db/sample_data.py                Show database contents")
            print("  python app/db/sample_data.py --clear        Clear all data")
            print("  python app/db/sample_data.py --copy-sample  Copy sample data to active DB")
            print("  python app/db/sample_data.py --help         Show this help")
    else:
        show_database_contents() 