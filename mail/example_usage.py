#!/usr/bin/env python3
"""
Exemple d'utilisation du syst√®me de mail automatis√©
"""

import logging
from mail_system import (
    send_question_to_student,
    send_questions_to_multiple_students,
    process_replies,
    evaluate_all_responses,
    run_full_workflow,
    monitor_mode
)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def example_send_single_question():
    """Exemple : Envoyer une question √† un √©tudiant"""
    print("\n=== EXEMPLE 1: Envoi d'une question ===")
    
    # Envoyer un challenge personnalis√© pour un utilisateur
    success = send_question_to_student(
        email="mathis.beaufour71@gmail.com",
        user_id=1
    )
    
    if success:
        print("‚úÖ Question envoy√©e avec succ√®s!")
    else:
        print("‚ùå √âchec de l'envoi")

def example_send_multiple_questions():
    """Exemple : Envoyer des questions √† plusieurs √©tudiants"""
    print("\n=== EXEMPLE 2: Envoi group√© ===")
    
    students = [
        {
            "email": "student1@example.com",
            "user_id": 1
        },
        {
            "email": "student2@example.com",
            "matiere": "informatique"
        },
        {
            "email": "student3@example.com",
            "user_id": 3
        }
    ]
    
    results = send_questions_to_multiple_students(students)
    
    print("üìä R√©sultats:")
    for email, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {email}")

def example_process_workflow():
    """Exemple : Workflow complet"""
    print("\n=== EXEMPLE 3: Workflow complet ===")
    
    # D√©finir les √©tudiants pour l'envoi (optionnel)
    students = [
        {"email": "mathis.beaufour71@gmail.com", "user_id": 1}
    ]
    
    # Ex√©cuter le workflow complet
    run_full_workflow(students)

def example_monitoring():
    """Exemple : Mode surveillance"""
    print("\n=== EXEMPLE 4: Mode surveillance ===")
    print("‚ö†Ô∏è  Mode surveillance activ√© - Appuyez sur Ctrl+C pour arr√™ter")
    
    try:
        # Surveillance toutes les 60 secondes (pour test)
        monitor_mode(interval=60)
    except KeyboardInterrupt:
        print("\nüõë Surveillance arr√™t√©e")

def example_manual_processing():
    """Exemple : Traitement manuel √©tape par √©tape"""
    print("\n=== EXEMPLE 5: Traitement manuel ===")
    
    # 1. Traiter les r√©ponses
    print("üì• Traitement des r√©ponses...")
    new_replies = process_replies()
    print(f"üì® {new_replies} nouvelles r√©ponses trait√©es")
    
    # 2. √âvaluer les r√©ponses
    print("ü§ñ √âvaluation des r√©ponses...")
    evaluated = evaluate_all_responses()
    print(f"‚úÖ {evaluated} r√©ponses √©valu√©es")

def main():
    """Menu principal d'exemples"""
    print("üöÄ EXEMPLES D'UTILISATION DU SYST√àME DE MAIL")
    print("=" * 50)
    
    examples = {
        "1": ("Envoyer une question", example_send_single_question),
        "2": ("Envoi group√©", example_send_multiple_questions),
        "3": ("Workflow complet", example_process_workflow),
        "4": ("Mode surveillance", example_monitoring),
        "5": ("Traitement manuel", example_manual_processing)
    }
    
    print("Choisissez un exemple:")
    for key, (description, _) in examples.items():
        print(f"  {key}. {description}")
    
    choice = input("\nVotre choix (1-5): ").strip()
    
    if choice in examples:
        _, example_func = examples[choice]
        try:
            example_func()
        except Exception as e:
            logger.error(f"Erreur lors de l'ex√©cution: {e}")
    else:
        print("‚ùå Choix invalide")

if __name__ == "__main__":
    main() 