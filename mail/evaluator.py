#!/usr/bin/env python3
"""
Simple response evaluation functionality
"""

import logging
import requests
import os
from typing import Dict, Optional
import re

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# Configuration de l'API
API_PORT = os.getenv('PORT', '8000')
API_BASE_URL = f"http://localhost:{API_PORT}/api"

def evaluate_response_simple(question: str, response: str, matiere: str, user_id: int = 1) -> Dict:
    """
    √âvaluation d'une r√©ponse via l'API d'√©valuation
    
    Args:
        question: La question pos√©e
        response: La r√©ponse de l'√©tudiant
        matiere: La mati√®re concern√©e
    
    Returns:
        Dict contenant la r√©ponse brute de l'API
        
    Raises:
        Exception: Si l'API d'√©valuation n'est pas disponible ou retourne une erreur
    """
    # Pr√©parer les donn√©es pour l'API (format attendu par l'API)
    api_data = {
        'question': question,
        'reponse_etudiant': response,  # Chang√© de 'response' √† 'reponse_etudiant'
        'matiere': matiere
    }
    
    # Appel √† l'API d'√©valuation avec user_id requis
    logger.info(f"Appel API d'√©valuation pour la mati√®re: {matiere} (user_id: {user_id})")
    api_response = requests.post(
        f'{API_BASE_URL}/evaluation/response?user_id={user_id}',  # Utilise le user_id de l'√©tudiant
        json=api_data,
        headers={'Content-Type': 'application/json'},
        timeout=30
    )
    
    if api_response.status_code == 200:
        api_result = api_response.json()
        logger.info(f"‚úÖ √âvaluation r√©ussie - API Response re√ßue")
        
        # Retourner la r√©ponse brute de l'API pour l'instant
        return {
            'raw_api_response': api_result,
            'api_status': 'success',
            'status_code': api_response.status_code
        }
    else:
        logger.error(f"‚ùå Erreur API: {api_response.status_code} - {api_response.text}")
        raise Exception(f"Erreur API d'√©valuation: {api_response.status_code}")

def clean_student_response(response: str) -> str:
    """
    Nettoie la r√©ponse de l'√©tudiant en enlevant les parties non pertinentes
    
    Args:
        response: R√©ponse brute de l'√©tudiant
        
    Returns:
        str: R√©ponse nettoy√©e
    """
    if not response:
        return ""
        
    # Convertir en string si ce n'est pas d√©j√† le cas
    response = str(response)
    
    # Enlever les parties de l'email original
    lines = response.split('\n')
    cleaned_lines = []
    skip_line = False
    
    for line in lines:
        # Ignorer les lignes de citation d'email
        if any(pattern in line.lower() for pattern in [
            'wrote:', '√©crit :', 'de :', 'from:', 'envoy√© :', 'sent:',
            'objet :', 'subject:', 'date :', 'date:', '√† :', 'to:',
            'cc :', 'cc:', 'bcc :', 'bcc:', 'r√©pondre √† :', 'reply-to:'
        ]):
            skip_line = True
            continue
            
        # Ignorer les lignes de s√©paration d'email
        if line.strip().startswith('---') or line.strip().startswith('==='):
            skip_line = True
            continue
            
        # Ignorer les lignes de formatage d'email
        if line.strip().startswith('>'):
            skip_line = True
            continue
            
        # R√©initialiser skip_line si on trouve une ligne vide
        if not line.strip():
            skip_line = False
            
        # Ajouter la ligne si on ne doit pas la sauter
        if not skip_line:
            cleaned_lines.append(line)
    
    # Rejoindre les lignes et nettoyer
    cleaned = '\n'.join(cleaned_lines)
    
    # Enlever les espaces multiples
    cleaned = ' '.join(cleaned.split())
    
    # Enlever les retours √† la ligne multiples
    cleaned = re.sub(r'\n\s*\n', '\n', cleaned)
    
    # Enlever les espaces au d√©but et √† la fin
    cleaned = cleaned.strip()
    
    return cleaned

def display_evaluation(evaluation: Dict, question: str, response: str):
    """Affiche l'√©valuation de mani√®re format√©e"""
    import json
    
    # Nettoyer la r√©ponse pour l'affichage
    clean_response = clean_student_response(response)
    
    print("\n" + "ü§ñ" * 30)
    print("R√âPONSE BRUTE DE L'API D'√âVALUATION")
    print("ü§ñ" * 30)
    
    print(f"üìù Question: {question[:100]}...")
    print(f"üìÑ R√©ponse nettoy√©e: {clean_response[:100]}...")
    print(f"üìä Status Code: {evaluation.get('status_code', 'N/A')}")
    print(f"üîó API Status: {evaluation.get('api_status', 'N/A')}")
    
    print("\nü§ñ R√©ponse compl√®te de l'API:")
    print(json.dumps(evaluation.get('raw_api_response', {}), indent=2, ensure_ascii=False))
    
    print("\n" + "ü§ñ" * 30)

def evaluate_and_display(question: str, response: str, matiere: str, user_id: int = 1) -> Dict:
    """√âvalue et affiche une r√©ponse"""
    evaluation = evaluate_response_simple(question, response, matiere, user_id)
    display_evaluation(evaluation, question, response)
    return evaluation

def send_feedback_email(to_email: str, evaluation: Dict, question: str, response: str, student_name: str = None, original_email: Dict = None, is_merdique: bool = False) -> bool:
    """
    Envoie un email de feedback avec l'√©valuation √† l'√©tudiant en r√©ponse √† son email
    
    Args:
        to_email: Adresse email de l'√©tudiant
        evaluation: Dictionnaire contenant l'√©valuation (ou r√©ponse brute de l'API)
        question: Question originale
        response: R√©ponse de l'√©tudiant
        student_name: Nom de l'√©tudiant (optionnel)
        original_email: Dict contenant les infos de l'email original pour cr√©er une r√©ponse
        is_merdique: Indique si c'est une r√©ponse inappropri√©e
    
    Returns:
        bool: True si envoy√© avec succ√®s
    """
    try:
        import yagmail
        from config import EMAIL, PASSWORD
        import json
        
        # Pr√©parer le contenu du feedback
        student_greeting = f"Bonjour {student_name}" if student_name else "Bonjour"
        
        # Extraire les donn√©es de l'API
        api_data = evaluation.get('raw_api_response', {}).get('data', {})
        score = api_data.get('score', 'N/A')
        note = api_data.get('note', 'N/A')
        feedback = api_data.get('feedback', 'Aucun feedback disponible')
        
        if is_merdique:
            # Format simplifi√© pour les r√©ponses inappropri√©es
            body = f"""{student_greeting},

R√âSULTAT
Note : {note}/20

FEEDBACK G√âN√âRAL
{feedback}"""
        else:
            # Format normal pour les autres r√©ponses
            points_forts = api_data.get('points_forts', [])
            points_ameliorer = api_data.get('points_ameliorer', [])
            suggestions = api_data.get('suggestions', [])
            reponse_modele = api_data.get('reponse_modele', '')

            body = f"""{student_greeting},

Voici l'√©valuation de votre r√©ponse :

R√âSULTAT
Note : {note}/20

FEEDBACK G√âN√âRAL
{feedback}

POINTS FORTS
{chr(10).join([f"‚Ä¢ {point}" for point in points_forts]) if points_forts else "‚Ä¢ Aucun point fort identifi√©"}

POINTS √Ä AM√âLIORER
{chr(10).join([f"‚Ä¢ {point}" for point in points_ameliorer]) if points_ameliorer else "‚Ä¢ Aucun point d'am√©lioration sp√©cifique"}

SUGGESTIONS
{chr(10).join([f"‚Ä¢ {suggestion}" for suggestion in suggestions]) if suggestions else "‚Ä¢ Aucune suggestion sp√©cifique"}

{f"R√âPONSE MOD√àLE{chr(10)}{reponse_modele}" if reponse_modele else ""}

Cordialement,
Le Rhino"""

        # Envoi de l'email
        logger.info(f"Envoi du feedback √† {to_email}")
        yag = yagmail.SMTP(EMAIL, PASSWORD)
        
        # Pr√©parer les en-t√™tes pour cr√©er une r√©ponse dans le m√™me thread
        headers = {}
        subject = None
        
        if original_email:
            # Conserver le sujet original
            original_subject = original_email.get('subject', '')
            if original_subject:
                # Si le sujet ne commence pas d√©j√† par "Re: "
                if not original_subject.lower().startswith('re:'):
                    subject = f"Re: {original_subject}"
                else:
                    subject = original_subject
                logger.info(f"Utilisation du sujet original: {subject}")
            
            # R√©cup√©rer le message_id de l'email original
            original_message_id = original_email.get('message_id')
            if original_message_id:
                # Ajouter les headers de threading
                headers['In-Reply-To'] = original_message_id
                headers['References'] = original_message_id
                logger.info(f"Envoi en r√©ponse au message ID: {original_message_id}")
            
            # R√©cup√©rer les r√©f√©rences existantes si pr√©sentes
            existing_references = original_email.get('references', '')
            if existing_references:
                # Ajouter les r√©f√©rences existantes
                headers['References'] = f"{existing_references} {original_message_id}"
                logger.info(f"Utilisation des r√©f√©rences existantes: {existing_references}")
        
        # Si pas de sujet original, utiliser un sujet par d√©faut
        if not subject:
            subject = "Re: üß† Question du jour"
            logger.info("Utilisation du sujet par d√©faut")
        
        # Envoyer l'email avec les headers de threading
        if headers:
            logger.info("Envoi avec headers de threading")
            yag.send(to=to_email, subject=subject, contents=body, headers=headers)
        else:
            logger.info("Envoi sans headers de threading (fallback)")
            yag.send(to=to_email, subject=subject, contents=body)
        
        logger.info(f"‚úÖ Feedback envoy√© avec succ√®s √† {to_email}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi feedback: {e}")
        return False

# Les fonctions de formatage de l'ancien syst√®me d'√©valuation ont √©t√© supprim√©es
# car nous utilisons maintenant la r√©ponse brute de l'API d'√©valuation

def send_apology_email(to_email: str, question: str, response: str, student_name: str = None, original_email: Dict = None, error_details: str = "") -> bool:
    """
    Envoie un email d'excuses lorsque l'√©valuation automatique n'est pas disponible
    
    Args:
        to_email: Adresse email de l'√©tudiant
        question: Question originale
        response: R√©ponse de l'√©tudiant
        student_name: Nom de l'√©tudiant (optionnel)
        original_email: Dict contenant les infos de l'email original pour cr√©er une r√©ponse
        error_details: D√©tails de l'erreur (optionnel)
    
    Returns:
        bool: True si envoy√© avec succ√®s
    """
    try:
        import yagmail
        from config import EMAIL, PASSWORD
        
        # Pr√©parer le contenu de l'email d'excuses
        student_greeting = f"Bonjour {student_name}" if student_name else "Bonjour"
        
        # Pr√©parer le sujet en r√©ponse √† l'email original
        if original_email and original_email.get('subject'):
            original_subject = original_email['subject']
            # Supprimer les "Re: " existants pour √©viter "Re: Re: ..."
            clean_subject = original_subject
            while clean_subject.startswith('Re: ') or clean_subject.startswith('RE: '):
                clean_subject = clean_subject[4:]
            subject = f"Re: {clean_subject} - ‚ö†Ô∏è Probl√®me technique temporaire"
        else:
            subject = "‚ö†Ô∏è Probl√®me technique temporaire - √âvaluation diff√©r√©e"
        
        # Corps du message d'excuses en fran√ßais
        body = f"""{student_greeting},

Nous vous remercions pour votre r√©ponse √† la question suivante :

üìù **QUESTION**
{question}

üìÑ **VOTRE R√âPONSE**
{response[:200]}{'...' if len(response) > 200 else ''}

‚ö†Ô∏è **PROBL√àME TECHNIQUE TEMPORAIRE**

Nous rencontrons actuellement un probl√®me technique avec notre syst√®me d'√©valuation automatique. 

üîß **SOLUTION EN COURS**
‚Ä¢ Notre √©quipe technique travaille activement √† r√©soudre ce probl√®me
‚Ä¢ Votre r√©ponse a bien √©t√© re√ßue et enregistr√©e
‚Ä¢ L'√©valuation sera effectu√©e d√®s que le syst√®me sera de nouveau op√©rationnel

üìß **PROCHAINES √âTAPES**
Vous recevrez votre √©valuation d√©taill√©e par email d√®s que notre syst√®me sera r√©tabli, g√©n√©ralement dans les 24 heures.

üôè **SINC√àRES EXCUSES**
Nous nous excusons sinc√®rement pour ce d√©sagr√©ment temporaire et vous remercions de votre patience.

Si vous avez des questions urgentes, n'h√©sitez pas √† nous contacter directement.

Cordialement,
L'√©quipe p√©dagogique üéì

---
D√©tails techniques : Syst√®me d'√©valuation temporairement indisponible
"""
        
        # Envoi de l'email avec en-t√™tes de r√©ponse si disponibles
        logger.info(f"Envoi d'email d'excuses √† {to_email}")
        yag = yagmail.SMTP(EMAIL, PASSWORD)
        
        # Pr√©parer les en-t√™tes pour cr√©er une r√©ponse dans le m√™me thread
        headers = {}
        if original_email:
            original_message_id = original_email.get('message_id')
            if original_message_id:
                headers['In-Reply-To'] = original_message_id
                headers['References'] = original_message_id
                logger.info(f"Envoi en r√©ponse au message ID: {original_message_id}")
        
        if headers:
            yag.send(to=to_email, subject=subject, contents=body, headers=headers)
        else:
            yag.send(to=to_email, subject=subject, contents=body)
        
        logger.info(f"‚úÖ Email d'excuses envoy√© avec succ√®s √† {to_email}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi email d'excuses: {e}")
        return False

def evaluate_display_and_send_feedback(question: str, response: str, matiere: str, 
                                      student_email: str, student_name: str = None, original_email: Dict = None, user_id: int = 1) -> tuple:
    """
    √âvalue une r√©ponse, l'affiche et envoie le feedback par email
    
    Returns:
        tuple: (evaluation_dict, feedback_sent_success)
    """
    try:
        # √âvaluer et afficher
        evaluation = evaluate_and_display(question, response, matiere, user_id)
        
        # S'assurer que original_email contient la mati√®re
        if original_email is None:
            original_email = {}
        if 'matiere' not in original_email:
            original_email['matiere'] = matiere
        
        # Envoyer le feedback
        feedback_sent = send_feedback_email(student_email, evaluation, question, response, student_name, original_email)
        
        return evaluation, feedback_sent
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'√©valuation: {e}")
        
        # Envoyer un email d'excuses en fran√ßais
        apology_sent = send_apology_email(student_email, question, response, student_name, original_email, str(e))
        
        return None, apology_sent 