#!/usr/bin/env python3
"""
Simple response evaluation functionality
"""

import logging
import requests
from typing import Dict, Optional

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

def evaluate_response_simple(question: str, response: str, matiere: str) -> Dict:
    """
    √âvaluation d'une r√©ponse via l'API d'√©valuation
    
    Args:
        question: La question pos√©e
        response: La r√©ponse de l'√©tudiant
        matiere: La mati√®re concern√©e
    
    Returns:
        Dict contenant la r√©ponse brute de l'API
        
    Raises:
        Exception: Si l'API d'√©valuation n'est pas disponible ou retourne une erreur
    """
    # Pr√©parer les donn√©es pour l'API (format attendu par l'API)
    api_data = {
        'question': question,
        'reponse_etudiant': response,  # Chang√© de 'response' √† 'reponse_etudiant'
        'matiere': matiere
    }
    
    # Appel √† l'API d'√©valuation avec user_id requis
    logger.info(f"Appel API d'√©valuation pour la mati√®re: {matiere}")
    api_response = requests.post(
        'http://localhost:8000/api/evaluation/response?user_id=1',  # Ajout du user_id requis
        json=api_data,
        headers={'Content-Type': 'application/json'},
        timeout=30
    )
    
    if api_response.status_code == 200:
        api_result = api_response.json()
        logger.info(f"‚úÖ √âvaluation r√©ussie - API Response re√ßue")
        
        # Retourner la r√©ponse brute de l'API pour l'instant
        return {
            'raw_api_response': api_result,
            'api_status': 'success',
            'status_code': api_response.status_code
        }
    else:
        logger.error(f"‚ùå Erreur API: {api_response.status_code} - {api_response.text}")
        raise Exception(f"Erreur API d'√©valuation: {api_response.status_code}")

# Les fonctions d'√©valuation locales ont √©t√© supprim√©es car l'√©valuation
# se fait maintenant via l'API /api/evaluation/response

def display_evaluation(evaluation: Dict, question: str, response: str):
    """Affiche l'√©valuation de mani√®re format√©e"""
    import json
    
    print("\n" + "ü§ñ" * 30)
    print("R√âPONSE BRUTE DE L'API D'√âVALUATION")
    print("ü§ñ" * 30)
    
    print(f"üìù Question: {question[:100]}...")
    print(f"üìÑ R√©ponse: {response[:100]}...")
    print(f"üìä Status Code: {evaluation.get('status_code', 'N/A')}")
    print(f"üîó API Status: {evaluation.get('api_status', 'N/A')}")
    
    print("\nü§ñ R√©ponse compl√®te de l'API:")
    print(json.dumps(evaluation.get('raw_api_response', {}), indent=2, ensure_ascii=False))
    
    print("\n" + "ü§ñ" * 30)

def evaluate_and_display(question: str, response: str, matiere: str) -> Dict:
    """√âvalue et affiche une r√©ponse"""
    evaluation = evaluate_response_simple(question, response, matiere)
    display_evaluation(evaluation, question, response)
    return evaluation

def send_feedback_email(to_email: str, evaluation: Dict, question: str, response: str, student_name: str = None, original_email: Dict = None) -> bool:
    """
    Envoie un email de feedback avec l'√©valuation √† l'√©tudiant en r√©ponse √† son email
    
    Args:
        to_email: Adresse email de l'√©tudiant
        evaluation: Dictionnaire contenant l'√©valuation (ou r√©ponse brute de l'API)
        question: Question originale
        response: R√©ponse de l'√©tudiant
        student_name: Nom de l'√©tudiant (optionnel)
        original_email: Dict contenant les infos de l'email original pour cr√©er une r√©ponse
    
    Returns:
        bool: True si envoy√© avec succ√®s
    """
    try:
        import yagmail
        from config import EMAIL, PASSWORD
        import json
        
        # Pr√©parer le contenu du feedback
        student_greeting = f"Bonjour {student_name}" if student_name else "Bonjour"
        
        # Pr√©parer le sujet en r√©ponse √† l'email original
        if original_email and original_email.get('subject'):
            original_subject = original_email['subject']
            # Supprimer les "Re: " existants pour √©viter "Re: Re: ..."
            clean_subject = original_subject
            while clean_subject.startswith('Re: ') or clean_subject.startswith('RE: '):
                clean_subject = clean_subject[4:]
            subject = f"Re: {clean_subject} - ü§ñ R√©ponse de l'API d'√©valuation"
        else:
            subject = "ü§ñ R√©ponse de l'API d'√©valuation"
        
        # Corps du message avec la r√©ponse brute de l'API
        body = f"""{student_greeting},

Voici la r√©ponse brute de l'API d'√©valuation pour votre question :

üìù **QUESTION POS√âE**
{question}

üìÑ **VOTRE R√âPONSE**
{response[:200]}{'...' if len(response) > 200 else ''}

ü§ñ **R√âPONSE BRUTE DE L'API**
```json
{json.dumps(evaluation, indent=2, ensure_ascii=False)}
```

üìä **INFORMATIONS TECHNIQUES**
‚Ä¢ Status Code: {evaluation.get('status_code', 'N/A')}
‚Ä¢ API Status: {evaluation.get('api_status', 'N/A')}

Cordialement,
Le syst√®me d'√©valuation automatique ü§ñ

---
Note: Cette r√©ponse contient les donn√©es brutes de l'API pour debug/d√©veloppement.
"""
        
        # Envoi de l'email avec en-t√™tes de r√©ponse si disponibles
        logger.info(f"Envoi du feedback √† {to_email}")
        yag = yagmail.SMTP(EMAIL, PASSWORD)
        
        # Pr√©parer les en-t√™tes pour cr√©er une r√©ponse dans le m√™me thread
        headers = {}
        if original_email:
            # Extraire le Message-ID de l'email original
            original_message_id = original_email.get('message_id')
            if original_message_id:
                headers['In-Reply-To'] = original_message_id
                headers['References'] = original_message_id
                logger.info(f"Envoi en r√©ponse au message ID: {original_message_id}")
        
        if headers:
            # Envoyer avec en-t√™tes personnalis√©s pour cr√©er une r√©ponse
            yag.send(to=to_email, subject=subject, contents=body, headers=headers)
        else:
            # Envoi normal si pas d'informations pour la r√©ponse
            yag.send(to=to_email, subject=subject, contents=body)
        
        logger.info(f"‚úÖ Feedback envoy√© avec succ√®s √† {to_email}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi feedback: {e}")
        return False

def format_evaluation_details(evaluation: Dict) -> str:
    """Formate les d√©tails de l'√©valuation pour l'email"""
    details = evaluation['details']
    return f"""‚Ä¢ Longueur de r√©ponse : {details['length_score']}/20 points ({details['response_length']} caract√®res)
‚Ä¢ Nombre de mots : {details['word_score']}/15 points ({details['word_count']} mots)
‚Ä¢ Mots-cl√©s techniques : {details['keyword_score']}/25 points
‚Ä¢ Structure et pr√©sentation : {details['structure_score']}/20 points
‚Ä¢ Effort et r√©flexion : {details['effort_score']}/20 points"""

def format_feedback_list(feedback_list: list) -> str:
    """Formate la liste de feedback pour l'email"""
    return '\n'.join([f"‚Ä¢ {feedback}" for feedback in feedback_list])

def format_recommendations(score: int) -> str:
    """G√©n√®re des recommandations bas√©es sur le score"""
    if score < 60:
        return """‚Ä¢ D√©veloppez davantage votre r√©ponse pour montrer votre compr√©hension
‚Ä¢ Utilisez des termes techniques appropri√©s √† la mati√®re
‚Ä¢ Structurez votre r√©ponse en paragraphes clairs
‚Ä¢ Ajoutez des exemples concrets pour illustrer vos propos"""
    elif score < 80:
        return """‚Ä¢ Bonne base ! Ajoutez plus d'exemples concrets
‚Ä¢ Approfondissez certains aspects de votre explication
‚Ä¢ Utilisez plus de vocabulaire technique sp√©cialis√©"""
    else:
        return """‚Ä¢ Excellente r√©ponse ! Continuez sur cette lanc√©e
‚Ä¢ Votre ma√Ætrise du sujet est √©vidente
‚Ä¢ La structure et le contenu sont tr√®s satisfaisants"""

def format_encouragement(grade: str) -> str:
    """G√©n√®re un message d'encouragement bas√© sur la note"""
    encouragements = {
        'A+': "üåü Travail exceptionnel ! Vous ma√Ætrisez parfaitement le sujet.",
        'A': "üéâ Tr√®s bon travail ! Vous d√©montrez une solide compr√©hension.",
        'B': "üëç Bon travail ! Continuez vos efforts, vous √™tes sur la bonne voie.",
        'C': "üí™ Travail correct. Avec un peu plus d'effort, vous pouvez encore progresser.",
        'D': "üìö Il y a des am√©liorations √† apporter. N'h√©sitez pas √† approfondir vos r√©visions.",
        'F': "üîÑ Cette r√©ponse n√©cessite plus de travail. Reprenez les concepts de base et n'h√©sitez pas √† demander de l'aide."
    }
    return encouragements.get(grade, "Continuez vos efforts !")

def send_apology_email(to_email: str, question: str, response: str, student_name: str = None, original_email: Dict = None, error_details: str = "") -> bool:
    """
    Envoie un email d'excuses lorsque l'√©valuation automatique n'est pas disponible
    
    Args:
        to_email: Adresse email de l'√©tudiant
        question: Question originale
        response: R√©ponse de l'√©tudiant
        student_name: Nom de l'√©tudiant (optionnel)
        original_email: Dict contenant les infos de l'email original pour cr√©er une r√©ponse
        error_details: D√©tails de l'erreur (optionnel)
    
    Returns:
        bool: True si envoy√© avec succ√®s
    """
    try:
        import yagmail
        from config import EMAIL, PASSWORD
        
        # Pr√©parer le contenu de l'email d'excuses
        student_greeting = f"Bonjour {student_name}" if student_name else "Bonjour"
        
        # Pr√©parer le sujet en r√©ponse √† l'email original
        if original_email and original_email.get('subject'):
            original_subject = original_email['subject']
            # Supprimer les "Re: " existants pour √©viter "Re: Re: ..."
            clean_subject = original_subject
            while clean_subject.startswith('Re: ') or clean_subject.startswith('RE: '):
                clean_subject = clean_subject[4:]
            subject = f"Re: {clean_subject} - ‚ö†Ô∏è Probl√®me technique temporaire"
        else:
            subject = "‚ö†Ô∏è Probl√®me technique temporaire - √âvaluation diff√©r√©e"
        
        # Corps du message d'excuses en fran√ßais
        body = f"""{student_greeting},

Nous vous remercions pour votre r√©ponse √† la question suivante :

üìù **QUESTION**
{question}

üìÑ **VOTRE R√âPONSE**
{response[:200]}{'...' if len(response) > 200 else ''}

‚ö†Ô∏è **PROBL√àME TECHNIQUE TEMPORAIRE**

Nous rencontrons actuellement un probl√®me technique avec notre syst√®me d'√©valuation automatique. 

üîß **SOLUTION EN COURS**
‚Ä¢ Notre √©quipe technique travaille activement √† r√©soudre ce probl√®me
‚Ä¢ Votre r√©ponse a bien √©t√© re√ßue et enregistr√©e
‚Ä¢ L'√©valuation sera effectu√©e d√®s que le syst√®me sera de nouveau op√©rationnel

üìß **PROCHAINES √âTAPES**
Vous recevrez votre √©valuation d√©taill√©e par email d√®s que notre syst√®me sera r√©tabli, g√©n√©ralement dans les 24 heures.

üôè **SINC√àRES EXCUSES**
Nous nous excusons sinc√®rement pour ce d√©sagr√©ment temporaire et vous remercions de votre patience.

Si vous avez des questions urgentes, n'h√©sitez pas √† nous contacter directement.

Cordialement,
L'√©quipe p√©dagogique üéì

---
D√©tails techniques : Syst√®me d'√©valuation temporairement indisponible
"""
        
        # Envoi de l'email avec en-t√™tes de r√©ponse si disponibles
        logger.info(f"Envoi d'email d'excuses √† {to_email}")
        yag = yagmail.SMTP(EMAIL, PASSWORD)
        
        # Pr√©parer les en-t√™tes pour cr√©er une r√©ponse dans le m√™me thread
        headers = {}
        if original_email:
            original_message_id = original_email.get('message_id')
            if original_message_id:
                headers['In-Reply-To'] = original_message_id
                headers['References'] = original_message_id
                logger.info(f"Envoi en r√©ponse au message ID: {original_message_id}")
        
        if headers:
            yag.send(to=to_email, subject=subject, contents=body, headers=headers)
        else:
            yag.send(to=to_email, subject=subject, contents=body)
        
        logger.info(f"‚úÖ Email d'excuses envoy√© avec succ√®s √† {to_email}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur envoi email d'excuses: {e}")
        return False

def evaluate_display_and_send_feedback(question: str, response: str, matiere: str, 
                                      student_email: str, student_name: str = None, original_email: Dict = None) -> tuple:
    """
    √âvalue une r√©ponse, l'affiche et envoie le feedback par email
    
    Returns:
        tuple: (evaluation_dict, feedback_sent_success)
    """
    try:
        # √âvaluer et afficher
        evaluation = evaluate_and_display(question, response, matiere)
        
        # Envoyer le feedback
        feedback_sent = send_feedback_email(student_email, evaluation, question, response, student_name, original_email)
        
        return evaluation, feedback_sent
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'√©valuation: {e}")
        
        # Envoyer un email d'excuses en fran√ßais
        apology_sent = send_apology_email(student_email, question, response, student_name, original_email, str(e))
        
        return None, apology_sent 