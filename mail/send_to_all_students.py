#!/usr/bin/env python3
"""
Script pour envoyer les challenges √† tous les √©tudiants et g√©rer leurs r√©ponses
"""

import logging
import requests
import time
from database_utils import get_all_students
from send_questions import send_question_from_api
from email_reader import wait_for_reply, display_reply, save_reply_to_conversations
from evaluator import evaluate_and_display, send_feedback_email
from utils import load_conversations, save_conversations
from config import EMAIL, PASSWORD
import threading
from queue import Queue
import concurrent.futures

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# Configuration de l'API
API_BASE_URL = "http://localhost:8000/api"

# File d'attente pour les feedbacks √† envoyer
feedback_queue = Queue()

def send_challenge_to_all_students():
    """Envoie le challenge √† tous les √©tudiants"""
    print("\n" + "="*60)
    print("üìß ENVOI DES CHALLENGES √Ä TOUS LES √âTUDIANTS")
    print("="*60)
    
    try:
        # R√©cup√©rer tous les √©tudiants
        students = get_all_students()
        print(f"üë• {len(students)} √©tudiants trouv√©s")
        
        # Envoyer le challenge √† chaque √©tudiant
        for student in students:
            print(f"\nüì§ Envoi du challenge √† {student['username']} ({student['email']})...")
            
            success = send_question_from_api(
                to=student['email'],
                user_id=student['id']
            )
            
            if success:
                print(f"‚úÖ Challenge envoy√© avec succ√®s √† {student['username']}")
            else:
                print(f"‚ùå √âchec de l'envoi du challenge √† {student['username']}")
            
            # Petit d√©lai entre chaque envoi pour √©viter de surcharger le serveur mail
            time.sleep(2)
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi des challenges: {e}")
        return False

def send_feedback_to_student(reply, evaluation, student):
    """Envoie le feedback √† l'√©tudiant"""
    try:
        if not reply or not evaluation:
            print("‚ùå R√©ponse ou √©valuation manquante")
            return False
            
        # Extraire les donn√©es n√©cessaires
        question_id = reply.get('question_id')
        if not question_id:
            print("‚ùå Question ID non trouv√©")
            return False
            
        conversations = load_conversations()
        if question_id not in conversations:
            print(f"‚ùå Conversation non trouv√©e pour la question {question_id}")
            return False
            
        challenge_data = conversations[question_id]
        question = challenge_data.get('question', 'Question non trouv√©e')
        student_email = reply['from']
        student_name = student.get('username', '√âtudiant')
        response_text = reply['body']
        
        print(f"üìß Envoi du feedback en r√©ponse √† {student_email}")
        print(f"üë§ √âtudiant: {student_name}")
        print(f"üìä Note obtenue: {evaluation['raw_api_response']['data']['note']}")
        print(f"üìä Score final: {evaluation['raw_api_response']['data']['score']}")
        
        # Envoyer le feedback en r√©ponse √† l'email original
        feedback_sent = send_feedback_email(
            to_email=student_email,
            evaluation=evaluation,
            question=question,
            response=response_text,
            student_name=student_name,
            original_email=reply
        )
        
        if feedback_sent:
            print("‚úÖ Feedback envoy√© avec succ√®s!")
            print(f"üì¨ L'√©tudiant {student_name} va recevoir son √©valuation d√©taill√©e")
            
            # Sauvegarder l'envoi du feedback
            conversations[question_id]['feedback_sent'] = True
            conversations[question_id]['feedback_sent_to'] = student_email
            save_conversations(conversations)
            print(f"‚úÖ Envoi du feedback enregistr√© pour {question_id}")
            
            return True
        else:
            print("‚ùå √âchec de l'envoi du feedback")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi du feedback: {e}")
        return False

def feedback_worker():
    """Worker thread pour envoyer les feedbacks de mani√®re asynchrone"""
    while True:
        try:
            # R√©cup√©rer un feedback de la file d'attente
            feedback_data = feedback_queue.get()
            if feedback_data is None:  # Signal de fin
                break
                
            reply, evaluation, student = feedback_data
            send_feedback_to_student(reply, evaluation, student)
            
        except Exception as e:
            print(f"‚ùå Erreur dans le worker de feedback: {e}")
        finally:
            feedback_queue.task_done()

def evaluate_reply(reply, student):
    """√âvalue une r√©ponse individuelle et met en file d'attente le feedback"""
    try:
        # R√©cup√©rer les donn√©es du challenge
        question_id = reply.get('question_id')
        if not question_id:
            print(f"‚ùå Question ID non trouv√© pour l'√©tudiant {student['id']}")
            return None
            
        conversations = load_conversations()
        if question_id not in conversations:
            print(f"‚ùå Conversation non trouv√©e pour la question {question_id}")
            return None
            
        challenge_data = conversations[question_id]
        question = challenge_data.get('question', 'Question non trouv√©e')
        matiere = challenge_data.get('matiere', 'Mati√®re inconnue')
        response_text = reply['body']
        
        # √âvaluer la r√©ponse
        evaluation = evaluate_and_display(question, response_text, matiere, user_id=student['id'])
        
        if evaluation:
            # Sauvegarder l'√©valuation
            conversations[question_id]['evaluation'] = evaluation
            save_conversations(conversations)
            
            # V√©rifier si la r√©ponse est marqu√©e comme "merdique"
            raw_response = evaluation.get('raw_api_response', {})
            data = raw_response.get('data', {})
            is_merdique = data.get('merdique', False)
            
            print(f"\nüîç V√©rification du statut 'merdique':")
            print(f"   - Raw API Response: {raw_response}")
            print(f"   - Data: {data}")
            print(f"   - Is merdique: {is_merdique}")
            
            if is_merdique:
                print(f"‚ö†Ô∏è R√©ponse inappropri√©e d√©tect√©e pour {student['username']}")
                # Cr√©er un message sp√©cial pour les r√©ponses inappropri√©es
                inappropriate_response = {
                    'body': """Votre r√©ponse ne respecte pas les r√®gles de base de la communication acad√©mique.

‚ö†Ô∏è ATTENTION
‚Ä¢ Les r√©ponses inappropri√©es, hors sujet ou contenant des insultes ne seront pas tol√©r√©es
‚Ä¢ Chaque question m√©rite une r√©ponse s√©rieuse et r√©fl√©chie
‚Ä¢ Le respect mutuel est essentiel dans un environnement d'apprentissage

üìù RAPPEL
‚Ä¢ Lisez attentivement la question avant de r√©pondre
‚Ä¢ Utilisez les concepts du cours pour structurer votre r√©ponse
‚Ä¢ Prenez le temps de r√©fl√©chir et de formuler une r√©ponse pertinente

Nous vous invitons √† reformuler votre r√©ponse de mani√®re appropri√©e et constructive.

Cordialement,
Le Rhino""",
                    'from': reply['from'],
                    'question_id': question_id
                }
                # Mettre en file d'attente le feedback sp√©cial
                feedback_queue.put((inappropriate_response, evaluation, student))
            else:
                # Mettre en file d'attente le feedback normal
                feedback_queue.put((reply, evaluation, student))
        
        return evaluation
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'√©valuation de la r√©ponse: {e}")
        return None

def process_student_response(student, timeout_minutes, response_queue):
    """Traite la r√©ponse d'un √©tudiant"""
    try:
        print(f"\n‚è≥ Attente de la r√©ponse de {student['username']}...")
        
        reply = wait_for_reply(student['email'], timeout_minutes)
        if reply:
            print(f"‚úÖ R√©ponse re√ßue de {student['username']}")
            display_reply(reply)
            save_reply_to_conversations(reply)
            
            # √âvaluer imm√©diatement la r√©ponse et mettre en file d'attente le feedback
            print(f"üß† √âvaluation de la r√©ponse de {student['username']}...")
            evaluation = evaluate_reply(reply, student)
            if evaluation:
                response_queue.put((student['id'], evaluation))
                print(f"‚úÖ √âvaluation termin√©e pour {student['username']}")
            else:
                print(f"‚ùå √âchec de l'√©valuation pour {student['username']}")
        else:
            print(f"‚è∞ Pas de r√©ponse de {student['username']} dans le d√©lai imparti")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du traitement de la r√©ponse de {student['username']}: {e}")

def wait_and_process_replies(timeout_minutes=30):
    """Attend et traite les r√©ponses des √©tudiants de mani√®re asynchrone"""
    print("\n" + "="*60)
    print("‚è≥ ATTENTE ET TRAITEMENT DES R√âPONSES")
    print("="*60)
    
    try:
        students = get_all_students()
        print(f"üë• Attente des r√©ponses de {len(students)} √©tudiants...")
        
        # File d'attente pour stocker les √©valuations
        response_queue = Queue()
        
        # D√©marrer le worker de feedback dans un thread s√©par√©
        feedback_thread = threading.Thread(target=feedback_worker, daemon=True)
        feedback_thread.start()
        
        # Cr√©er un pool de threads pour traiter les r√©ponses
        with concurrent.futures.ThreadPoolExecutor(max_workers=len(students)) as executor:
            # Lancer le traitement de chaque √©tudiant dans un thread s√©par√©
            futures = [
                executor.submit(process_student_response, student, timeout_minutes, response_queue)
                for student in students
            ]
            
            # Attendre que tous les threads soient termin√©s
            concurrent.futures.wait(futures)
        
        # Signal de fin pour le worker de feedback
        feedback_queue.put(None)
        feedback_thread.join()
        
        # R√©cup√©rer toutes les √©valuations de la file d'attente
        evaluations = {}
        while not response_queue.empty():
            student_id, evaluation = response_queue.get()
            evaluations[student_id] = evaluation
        
        return evaluations
        
    except Exception as e:
        print(f"‚ùå Erreur lors du traitement des r√©ponses: {e}")
        return {}

def main():
    """Fonction principale"""
    print("\nüöÄ D√âMARRAGE DU PROCESSUS D'ENVOI ET D'√âVALUATION")
    
    # √âtape 1: Envoyer les challenges
    if not send_challenge_to_all_students():
        print("‚ùå Arr√™t du processus: √©chec de l'envoi des challenges")
        return
    
    # √âtape 2: Attendre et traiter les r√©ponses de mani√®re asynchrone
    evaluations = wait_and_process_replies()
    
    print("\n‚ú® PROCESSUS TERMIN√â")
    print(f"üìä R√©sum√©:")
    print(f"   - Challenges envoy√©s: {len(get_all_students())}")
    print(f"   - R√©ponses √©valu√©es et feedbacks envoy√©s: {len(evaluations)}")

if __name__ == "__main__":
    main() 